OCPBUGS_TRIAGING_CACHE_V2
# AI-native associations between technical contexts and OpenShift components
# Generated: 2025-08-28
# NO raw ticket content - only learned patterns and associations

# OpenShift Architecture Layer Mappings
ARCHITECTURE_LAYER_MAPPING:
  OS_PACKAGE_LAYER:
    - systemd_package_vulnerabilities -> RHCOS (confidence: 0.95)
    - kernel_vulnerabilities -> RHCOS (confidence: 0.98)  
    - base_os_packages -> RHCOS (confidence: 0.92)
    - rhcos_image_content -> RHCOS (confidence: 0.99)
  
  CONTAINER_BUILD_LAYER:
    - golang_builder_containers -> Build (confidence: 0.87)
    - s2i_build_process -> Build (confidence: 0.94)
    - source_to_image -> Build (confidence: 0.96)
    - container_building_infrastructure -> Build (confidence: 0.91)
    - enterprise_builder_containers -> Build (confidence: 0.89)

  CONFIGURATION_LAYER:
    - systemd_configuration -> Machine Config Operator (confidence: 0.82)
    - systemd_service_files -> Machine Config Operator (confidence: 0.85)
    - node_configuration -> Machine Config Operator (confidence: 0.88)

# CVE Pattern Recognition
CVE_PATTERNS:
  SYSTEMD_VULNERABILITIES:
    - systemd_coredump_race_conditions -> RHCOS (package_level: true, confidence: 0.94)
    - systemd_service_vulnerabilities -> RHCOS (package_level: true, confidence: 0.91)
    
  GOLANG_VULNERABILITIES:
    - net_http_request_smuggling -> Build (when: container_builder_context, confidence: 0.83)
    - crypto_vulnerabilities_in_builders -> Build (when: builder_container, confidence: 0.86)

# Component Responsibility Boundaries  
COMPONENT_BOUNDARIES:
  RHCOS_VS_MCO:
    - rhcos_owns: [systemd_package, os_package_updates, base_system_vulnerabilities]
    - mco_owns: [systemd_configuration, service_unit_files, systemd_settings]
    - boundary_rule: "package vs configuration distinction" (confidence: 0.96)
  
  BUILD_VS_RELEASE:
    - build_owns: [builder_containers, s2i_infrastructure, container_building]
    - release_owns: [release_process, ga_timing, version_management]
    - boundary_rule: "build infrastructure vs release management" (confidence: 0.84)

# Historical Assignment Validation
HISTORICAL_PATTERNS:
  SYSTEMD_CVE_2025_4598:
    - pattern: "systemd race condition vulnerabilities"
    - validated_assignments: "RHCOS component for 9 related issues"
    - assignment_consistency: 0.98
    - reasoning: "OS package vulnerability requires RHCOS team for package updates"
  
  GOLANG_BUILDER_CVES:
    - pattern: "openshift-golang-builder-container vulnerabilities"  
    - mixed_assignments: ["Build", "Release", "Security"]
    - assignment_consistency: 0.72
    - reasoning: "Container building infrastructure should route to Build component"

# OpenShift Knowledge Base Associations
OPENSHIFT_KNOWLEDGE:
  ARCHITECTURE_UNDERSTANDING:
    - systemd_in_openshift: "runs on every node, managed by RHCOS for packages, MCO for config"
    - builder_containers: "part of S2I build system owned by Build component"
    - component_hierarchy: "specific components preferred over generic Security component"
  
  TECHNICAL_CONTEXT_MAPPING:
    - os_level_vulnerabilities -> RHCOS (architectural_fit: true)
    - build_infrastructure_issues -> Build (architectural_fit: true)
    - node_configuration_problems -> Machine Config Operator (architectural_fit: true)

# Confidence Scoring Factors
CONFIDENCE_FACTORS:
  HIGH_CONFIDENCE (0.90+):
    - exact_component_description_match
    - multiple_historical_precedents
    - clear_architectural_boundary
  
  MEDIUM_CONFIDENCE (0.70-0.89):
    - partial_component_description_match
    - some_historical_precedents
    - reasonable_architectural_fit
  
  LOW_CONFIDENCE (0.50-0.69):
    - unclear_component_boundaries
    - mixed_historical_assignments
    - ambiguous_technical_context

# Learning Metadata
CACHE_METADATA:
  version: "2.0"
  last_updated: "2025-08-28"
  total_patterns: 24
  high_confidence_patterns: 12
  medium_confidence_patterns: 8
  low_confidence_patterns: 4
  architecture_layers_mapped: 3
  component_boundaries_defined: 2
  cve_patterns_recognized: 4
# NEW LEARNING SESSION - 2025-09-01
# oauth-proxy CVE vulnerability pattern recognition

# oauth-proxy Component Patterns
OAUTH_PROXY_PATTERNS:
  CVE_OAUTH_PROXY_VULNERABILITIES:
    - ose_oauth_proxy_cves -> oauth-proxy (confidence: 0.95)
    - golang_crypto_oauth_bypass -> oauth-proxy (confidence: 0.93)
    - serverconfigpublickeycallback_misuse -> oauth-proxy (confidence: 0.94)
    - oauth_authorization_bypass -> oauth-proxy (confidence: 0.92)

# Updated Architecture Layer Mappings
ARCHITECTURE_LAYER_MAPPING:
  AUTHENTICATION_LAYER:
    - oauth_proxy_vulnerabilities -> oauth-proxy (confidence: 0.95)
    - oauth_container_security -> oauth-proxy (confidence: 0.96)
    - auth_proxy_cves -> oauth-proxy (confidence: 0.94)

# Updated Component Responsibility Boundaries  
COMPONENT_BOUNDARIES:
  OAUTH_PROXY_VS_SECURITY:
    - oauth_proxy_owns: [ose_oauth_proxy_container, oauth_functionality, auth_proxy_security]
    - security_owns: [generic_security_reviews, cross_component_security_policy]
    - boundary_rule: "specific component security issues go to component, not Security" (confidence: 0.97)

# Historical Assignment Validation - oauth-proxy
HISTORICAL_PATTERNS:
  OAUTH_PROXY_CVE_PATTERN:
    - pattern: "CVE vulnerabilities in ose-oauth-proxy"
    - validated_assignments: "oauth-proxy component for 70+ related issues"
    - assignment_consistency: 0.98
    - reasoning: "OAuth proxy container security requires oauth-proxy team expertise"
    - historical_examples: [
        "CVE-2024-8421: oauth-proxy component",
        "CVE-2024-45338: oauth-proxy component", 
        "CVE-2024-24786: oauth-proxy component",
        "CVE-2023-39325: oauth-proxy component"
    ]

# Updated OpenShift Knowledge Base
OPENSHIFT_KNOWLEDGE:
  OAUTH_PROXY_UNDERSTANDING:
    - oauth_proxy_role: "standalone authentication proxy container outside core cluster"
    - component_scope: "openshift/oauth-proxy image stream and container security"
    - engineering_ownership: "dedicated oauth-proxy team for container maintenance"
  
  SECURITY_COMPONENT_USAGE:
    - avoid_for_specific_components: true
    - use_for_generic_security_only: true
    - escalation_path: "use generic Security only when specific component unclear"

# Updated Learning Metadata
CACHE_METADATA_UPDATE:
  learning_session: "2025-09-01"
  new_patterns_added: 4
  oauth_proxy_confidence: 0.95
  historical_validation_strength: "very_strong"
  assignment_recommendations: 2
  issues_analyzed: ["OCPBUGS-61095", "OCPBUGS-61094"]